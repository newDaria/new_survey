from django.test import TestCase
from django.urls import reverse
from rest_framework import status
from rest_framework.test import APIClient
from survey_app.models import Survey, Question, Option, Answer
from survey_app.serializers import SurveySerializer, QuestionSerializer, OptionSerializer, AnswerSerializer
# from django.contrib.auth.models import User
from survey_app.models import UserProfile

class SurveyQuestionsViewTestCase(TestCase):
    def setUp(self):
        # the Django REST framework's APIClient is created, which allows us to make HTTP requests to the views.
        self.client = APIClient()
        # A test user is created using Django's User model. This user will be used for authentication during testing.
        self.user = UserProfile.objects.create_user(username='testuser', password='testpassword')
        # The test client is forced to authenticate as the test user, so that the views can be tested with proper authentication.
        self.client.force_authenticate(user=self.user)
        # A test survey is created using the Survey model.
        # This survey will be used for testing the SurveyQuestionsView.
        self.survey = Survey.objects.create(title='Test Survey', creator=self.user)
        # A test question is created using the Question model and associated with the test survey.
        # This question will be used for testing the SurveyQuestionsView.
        self.question = Question.objects.create(survey=self.survey, text='Test Question')
        # A test option is created using the Option model and associated with the test question.
        # This option will be used for testing the SurveyQuestionsView.
        self.option = Option.objects.create(question=self.question, text='Test Option')

    def test_list_survey_questions(self):
        # Here, the URL for the SurveyQuestionsView is generated by reversing the URL pattern
        # with the name 'survey-questions' and passing the primary key of the survey as a named argument.
        # This allows testing requests to a specific survey.
        url = reverse('survey-questions', kwargs={'survey_pk': self.survey.pk})
        # The Django test client is used here to perform a GET request to the generated URL and
        # store the response. Now we have access to the response data and the status of the request
        # for further verification.
        response = self.client.get(url)
        # This line checks that the response status code is equal to 200 OK, which indicates a successful request.
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        #  Here, it is verified that the response data contains the expected
        #  survey title, which should be 'Test Survey'.
        self.assertEqual(response.data['survey']['title'], 'Test Survey')
        # This line checks that the response contains exactly one question associated with the survey.
        self.assertEqual(len(response.data['questions']), 1)
        # Finally, this line checks that the text of the first question in the response is 'Test Question'.
        self.assertEqual(response.data['questions'][0]['text'], 'Test Question')

class QuestionOptionsViewTestCase(TestCase):
    def setUp(self):
        self.client = APIClient()
        self.user = UserProfile.objects.create_user(username='testuser', password='testpassword')
        self.client.force_authenticate(user=self.user)
        self.survey = Survey.objects.create(title='Test Survey', creator=self.user)
        self.question = Question.objects.create(survey=self.survey, text='Test Question')

    def test_list_question_options(self):
        url = reverse('question-options', kwargs={'question_pk': self.question.pk})
        response = self.client.get(url)
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        self.assertEqual(response.data['question']['text'], 'Test Question')
        self.assertEqual(len(response.data['options']), 0)

    def test_create_question_option(self):
        url = reverse('question-options', kwargs={'question_pk': self.question.pk})
        data = {'text': 'Test Option', 'question': self.question.pk}  # Include the 'question' field
        response = self.client.post(url, data)
        print(response.data)  # Check the error details in the response
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        self.assertEqual(self.question.option_set.count(), 1)
        self.assertEqual(self.question.option_set.first().text, 'Test Option')